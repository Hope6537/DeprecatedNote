<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
	<!-- 1、引入aop的命名空间 xmlns:aop="http://www.springframework.org/schema/aop" -->
	<!-- 2、引入目标类 -->
	<bean id="personDao" class="org.hope6537.springtest.aoptest.PersonDaoImpl"></bean>
	<!-- 3、引入切面 -->
	<bean id="transaction" class="org.hope6537.springtest.aoptest.Transaction"></bean>
	<!-- 4、引入拦截器 Spring内部实现 -->
	<!-- 5、引入aop配置 -->
	<aop:config>
		<!-- 切入点表达式 及确定哪个类可以生成代理对象 -->
		<aop:pointcut
			expression="execution(* org.hope6537.springtest.aoptest.PersonDaoImpl.*(..))"
			id="cud" />
		<!-- 配置切面 -->
		<aop:aspect ref="transaction">
			<!-- 前置通知 -->
			<!-- <aop:before method="beginTransaction" pointcut-ref="cud" /> -->
			<!-- 后置通知 可以设定返回值 -->
			<!-- <aop:after-returning method="commit"
				pointcut-ref="cud" returning="val" /> -->
			<!-- 前置通知和后置通知只能在目标方法上下文中添加内容，但是控制不了目标方法的执行 -->
			<!-- 最终通知 也是在目标方法执行之后执行,无视目标方法是否遇到中断 一般用于关闭资源 -->
			<!-- <aop:after method="finallyMethod" pointcut-ref="cud" /> -->
			<!-- 异常通知 目的就是为了获取目标方法抛出的异常 -->
			<aop:after-throwing method="exceptionMethod"
				pointcut-ref="cud" throwing="ex" />
			<!-- 环绕通知 -->
			<aop:around method="aroundMethod" pointcut-ref="cud" />
		</aop:aspect>
	</aop:config>
</beans>